library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
write.rss(entry)
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
write.rss(entry)
rmarkdown::render_site()
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
write.rss(entry)
rmarkdown::render_site()
write.rss <- function(x, file = "feed.xml",
xmlver = "1.0", rssver = "2.0", title = "Katis' and Sigberts' R blog", link = "http://zukovska.de/R",
description = "Katis' and Sigberts' R blog", language = "en-us",
copyright = "Copyright 2019, Jekaterina Zukovska, Sigbert Klinke", pubDate = Sys.time(),
lastBuildDate = Sys.time(), docs = "https://validator.w3.org/feed/docs/rss2.html",
generator = "Function write.rss() in R package animation v-1.1.-03 ",
managingEditor = "sigbert@hu-berlin.de (Sigbert Klinke)",
webMaster = "sigbert@hu-berlin.de (Sigbert Klinke)",
maxitem = 10, ...) {
x  <- strsplit(x, ',', fixed=TRUE)
browser()
df <-list()
for (i in 1:length(x[[1]])) {
df[[trimws(x[[1]][i])]] <- trimws(lapply(x, '[[', i)[-1])
}
x <- as.data.frame(df,  stringsAsFactors = FALSE)
x[['pubDate']] <- rfc822t(as.Date(x[['pubDate']]))
x[['link']] <- paste(link, x[['link']], sep="/")
x[['guid']] <- x[['link']]
if (nrow(x) > maxitem)
x = x[(nrow(x) - maxitem + 1):nrow(x), ]
x = x[nrow(x):1, ]
lcl = Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
pubDate = format(pubDate, "%a, %d %b %Y %H:%M:%S GMT")
lastBuildDate = format(lastBuildDate, "%a, %d %b %Y %H:%M:%S GMT")
cat("<?xml version", "=\"", xmlver, "\"?>\n",
"<rss version=\"",   rssver, "\">\n",
"\t", "<channel>\n",
#      "\t\t", "<atom:link href=\"", self, "\" rel=\"self\" type=\"application/rss+xml\" />\n",
"\t\t", "<title>", title, "</title>\n",
"\t\t", "<link>", link, "</link>\n",
"\t\t", "<description>", description, "</description>\n",
"\t\t", "<language>", language, "</language>\n",
"\t\t", "<pubDate>", pubDate, "</pubDate>\n",
"\t\t", "<lastBuildDate>", lastBuildDate, "</lastBuildDate>\n",
"\t\t", "<docs>", docs, "</docs>\n",
"\t\t", "<generator>", generator, "</generator>\n",
"\t\t", "<managingEditor>", managingEditor, "</managingEditor>\n",
"\t\t", "<copyright>", copyright, "</copyright>\n",
"\t\t", "<webMaster>", webMaster, "</webMaster>\n",
file = file, sep = "")
extra = list(...)
if (length(extra)) {
tag1 = paste("\t\t<", names(extra), ">", sep = "")
tag2 = paste("</", names(extra), ">", sep = "")
cat(paste(tag1, extra, tag2, sep = "", collapse = "\n"),
"\n", file = file, append = TRUE)
}
x[, "description"] = paste("<![CDATA[", x[, "description"],
"]]>", sep = "")
tag1 = paste("<", colnames(x), ">", sep = "")
tag2 = paste("</", colnames(x), ">", sep = "")
cat(paste("\t\t<item>", apply(x, 1, function(xx) paste("\t\t\t",
paste(tag1, xx, tag2, sep = "", collapse = "\n\t\t\t"),
sep = "")), "\t\t</item>", sep = "\n", collapse = "\n"),
file = file, append = TRUE)
cat("\n\t", "</channel>", file = file, append = TRUE)
cat("\n</rss>", file = file, append = TRUE)
Sys.setlocale("LC_TIME", lcl)
cat("RSS feed created at:", file, "\n")
}
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
write.rss(entry)
rmarkdown::render_site()
write.rss <- function(x, file = "feed.xml",
xmlver = "1.0", rssver = "2.0", title = "Katis' and Sigberts' R blog", link = "http://zukovska.de/R",
description = "Katis' and Sigberts' R blog", language = "en-us",
copyright = "Copyright 2019, Jekaterina Zukovska, Sigbert Klinke", pubDate = Sys.time(),
lastBuildDate = Sys.time(), docs = "https://validator.w3.org/feed/docs/rss2.html",
generator = "Function write.rss() in R package animation v-1.1.-03 ",
managingEditor = "sigbert@hu-berlin.de (Sigbert Klinke)",
webMaster = "sigbert@hu-berlin.de (Sigbert Klinke)",
maxitem = 10, ...) {
x  <- strsplit(x, ',', fixed=TRUE)
browser()
df <-list()
for (i in 1:length(x[[1]])) {
df[[trimws(x[[1]][i])]] <- trimws(lapply(x, '[[', i)[-1])
}
x <- as.data.frame(df,  stringsAsFactors = FALSE)
x[['pubDate']] <- rfc822t(as.Date(x[['pubDate']]))
x[['link']] <- paste(link, x[['link']], sep="/")
x[['guid']] <- x[['link']]
if (nrow(x) > maxitem)
x = x[(nrow(x) - maxitem + 1):nrow(x), ]
x = x[nrow(x):1, ]
lcl = Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "C")
pubDate = format(pubDate, "%a, %d %b %Y %H:%M:%S GMT")
lastBuildDate = format(lastBuildDate, "%a, %d %b %Y %H:%M:%S GMT")
cat("<?xml version", "=\"", xmlver, "\"?>\n",
"<rss version=\"",   rssver, "\">\n",
"\t", "<channel>\n",
#      "\t\t", "<atom:link href=\"", self, "\" rel=\"self\" type=\"application/rss+xml\" />\n",
"\t\t", "<title>", title, "</title>\n",
"\t\t", "<link>", link, "</link>\n",
"\t\t", "<description>", description, "</description>\n",
"\t\t", "<language>", language, "</language>\n",
"\t\t", "<pubDate>", pubDate, "</pubDate>\n",
"\t\t", "<lastBuildDate>", lastBuildDate, "</lastBuildDate>\n",
"\t\t", "<docs>", docs, "</docs>\n",
"\t\t", "<generator>", generator, "</generator>\n",
"\t\t", "<managingEditor>", managingEditor, "</managingEditor>\n",
"\t\t", "<copyright>", copyright, "</copyright>\n",
"\t\t", "<webMaster>", webMaster, "</webMaster>\n",
file = file, sep = "")
extra = list(...)
if (length(extra)) {
tag1 = paste("\t\t<", names(extra), ">", sep = "")
tag2 = paste("</", names(extra), ">", sep = "")
cat(paste(tag1, extra, tag2, sep = "", collapse = "\n"),
"\n", file = file, append = TRUE)
}
x[, "description"] = paste("<![CDATA[", x[, "description"],
"]]>", sep = "")
tag1 = paste("<", colnames(x), ">", sep = "")
tag2 = paste("</", colnames(x), ">", sep = "")
cat(paste("\t\t<item>", apply(x, 1, function(xx) paste("\t\t\t",
paste(tag1, xx, tag2, sep = "", collapse = "\n\t\t\t"),
sep = "")), "\t\t</item>", sep = "\n", collapse = "\n"),
file = file, append = TRUE)
cat("\n\t", "</channel>", file = file, append = TRUE)
cat("\n</rss>", file = file, append = TRUE)
Sys.setlocale("LC_TIME", lcl)
cat("RSS feed created at:", file, "\n")
}
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
write.rss(entry)
sapply(x, length)
as.data.frame.character
c('a','z') %in% letters[1:5]
?any
?all
?startsWith
as.Date(x[['pubDate']])
as.Date('2010-10-4')
res<-as.Date('2010-10-4')
class(res)
res<-rfc822t(as.Date('2010-10-4'))
class(res)
startsWith[x, "http"]
startsWith(c("a", "b), "http")
startsWith(c("a", "b"), "http")
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
res <- txt2df(entry)
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
res <- txt2df(entry)
res
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
res <- txt2df(entry)
library(datetimeutils)
source("write.rss.R")
# RSS entry : title, link, author, description, pubDate, quid, category
entry <- c(
"title, link, author, description, pubDate, category", # automatically guid
"Start of blog, start_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Start of our blog, 2019-10-04, Introduction",
"New version of plot.matrix, plot-matrix_en.html, sigbert@hu-berlin.de (Sigbert Klinke), Version 1.3.1 on GitHub, 2019-10-04, plot.matrix"
)
write.rss(txt2df(entry))
?data
?download.file
setwd("~/syncthing/projekte/R/mmstat.data/R")
library("devtools")
check()
check()
library("psych")
library("tidyverse")
check()
check()
install()
library("mmstat.data")
data(dasl.titanic)
data(dasl.titanic, verbose=TRUE)
data(dasl.titanic, verbose=TRUE)
setwd("~/syncthing/projekte/R/mmstat.data/R")
check()
check()
#' data
#'
#' Loads a specified a data set either locally of from the internet (GitHub).
#' If the data set name is not in the list of internet data set names then the standard
#' \code{\link[utils]{data}} will be called instead.
#'
#' @details If the data is loaded from internet then it will be locally stored in \code{~/.mmstat}.
#' Later calls will first check that directory before trying to load from internet.
#'
#' @note If loading a data set from internet fails then the result is undefined.
#' You may get an error, a warning and/or a data set which contains garbage.
#'
#' @param wwwdatalist list of data sets and URLs (default: \code{getOption('wwwdata')})
#' @inheritParams utils::data
#'
#' @return a data set
#' @importFrom tools file_ext
#' @export
#'
#' @examples
#' \dontrun{
#' data(ansur2.male)
#' str(ansur2.male)
#' }
data <- function(..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE,
wwwdatalist = getOption('wwwdata')) {
names <- c(as.character(substitute(list(...))[-1L]), list)
for (name in names) {
if (is.null(wwwdatalist[[name]])) {
args <- list(name, package=package, lib.loc=lib.loc, verbose=verbose, envir=envir, overwrite=overwrite)
do.call(utils::data, args)
} else {
# check if .mmstat exists
libdir <- path.expand("~/.mmstat")
if (!file.exists(libdir)) {
dir.create(libdir, showWarnings = FALSE)
wwwdata <- paste0(libdir, '/wwwdata.txt')
if (!file.exists(wwwdata))
download.file('https://github.com/sigbertklinke/wwwdata/raw/master/wwwdata/wwwdata.txt',
wwwdata, quiet=TRUE)
sources <- readLines(wwwdata)
for (source in sources) {
zzz <- paste0(libdir, '/', basename(source), '_zzz.R')
if (!file.exists(zzz)) download.file(paste(source, 'zzz.R', sep='/'), zzz, quiet=TRUE)
}
options(wwwwdata=list())
zzz <- list.files(path=libdir, pattern="_zzz\\.R$", full.names=TRUE)
for (z in zzz) source(z)
}
#
if (!overwrite && exists(name, envir = envir, inherits = FALSE)) {
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(name)))
} else {
fn <- path.expand(paste0("~/.mmstat/", basename(wwwdatalist[[name]])))
if (!file.exists(fn)) {
if (verbose) cat(sprintf("Loading data from %s\n", wwwdatalist[[name]]))
download.file(wwwdatalist[[name]], fn, quiet=TRUE)
}
if (verbose) cat(sprintf("Assining data from %s\n", fn))
assign(name, readRDS(fn) , envir=envir)
}
}
}
invisible(names)
}
data(dasl.titanic, verbose=TRUE)
rm(dasl.titanic)
data(dasl.titanic, verbose=TRUE)
data(dasl.titanic, verbose=TRUE)
#' data
#'
#' Loads a specified a data set either locally of from the internet (GitHub).
#' If the data set name is not in the list of internet data set names then the standard
#' \code{\link[utils]{data}} will be called instead.
#'
#' @details If the data is loaded from internet then it will be locally stored in \code{~/.mmstat}.
#' Later calls will first check that directory before trying to load from internet.
#'
#' @note If loading a data set from internet fails then the result is undefined.
#' You may get an error, a warning and/or a data set which contains garbage.
#'
#' @param wwwdatalist list of data sets and URLs (default: \code{getOption('wwwdata')})
#' @inheritParams utils::data
#'
#' @return a data set
#' @importFrom tools file_ext
#' @export
#'
#' @examples
#' \dontrun{
#' data(ansur2.male)
#' str(ansur2.male)
#' }
data <- function(..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE,
wwwdatalist = getOption('wwwdata')) {
names <- c(as.character(substitute(list(...))[-1L]), list)
for (name in names) {
if (is.null(wwwdatalist[[name]])) {
args <- list(name, package=package, lib.loc=lib.loc, verbose=verbose, envir=envir, overwrite=overwrite)
do.call(utils::data, args)
} else {
# check if .mmstat exists
libdir <- path.expand("~/.mmstat")
if (!file.exists(libdir)) {
dir.create(libdir, showWarnings = FALSE)
wwwdata <- paste0(libdir, '/wwwdata.txt')
if (!file.exists(wwwdata))
download.file('https://github.com/sigbertklinke/wwwdata/raw/master/wwwdata/wwwdata.txt',
wwwdata, quiet=TRUE)
sources <- readLines(wwwdata)
for (source in sources) {
zzz <- paste0(libdir, '/', basename(source), '_zzz.R')
if (!file.exists(zzz)) download.file(paste(source, 'zzz.R', sep='/'), zzz, quiet=TRUE)
}
options(wwwwdata=list())
zzz <- list.files(path=libdir, pattern="_zzz\\.R$", full.names=TRUE)
for (z in zzz) source(z)
}
#
if (!overwrite && exists(name, envir = envir, inherits = FALSE)) {
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(name)))
} else {
fn <- path.expand(paste0("~/.mmstat/", basename(wwwdatalist[[name]])))
if (!file.exists(fn)) {
if (verbose) cat(sprintf("Loading data from %s\n", wwwdatalist[[name]]))
download.file(wwwdatalist[[name]], fn, quiet=TRUE)
}
if (verbose) cat(sprintf("Assigning data from %s\n", fn))
assign(name, readRDS(fn) , envir=envir)
}
}
}
invisible(names)
}
data(dasl.titanic, verbose=TRUE)
basename("dasl.titanic")
?basename
library("utils")
install()
library("mmstat.data")
data(Titanic)
#' data
#'
#' Loads a specified a data set either locally of from the internet (GitHub).
#' If the data set name is not in the list of internet data set names then the standard
#' \code{\link[utils]{data}} will be called instead.
#'
#' @details If the data is loaded from internet then it will be locally stored in \code{~/.mmstat}.
#' Later calls will first check that directory before trying to load from internet.
#'
#' @note If loading a data set from internet fails then the result is undefined.
#' You may get an error, a warning and/or a data set which contains garbage.
#'
#' @param wwwdatalist list of data sets and URLs (default: \code{getOption('wwwdata')})
#' @inheritParams utils::data
#'
#' @return a data set
#' @importFrom tools file_ext
#' @export
#'
#' @examples
#' \dontrun{
#' data(ansur2.male)
#' str(ansur2.male)
#' }
data <- function(..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE,
wwwdatalist = getOption('wwwdata')) {
names <- c(as.character(substitute(list(...))[-1L]), list)
for (name in names) {
browser()
if (is.null(wwwdatalist[[name]])) {
args <- list(name, package=package, lib.loc=lib.loc, verbose=verbose, envir=envir, overwrite=overwrite)
do.call(utils::data, args)
} else {
# check if .mmstat exists
libdir <- path.expand("~/.mmstat")
if (!file.exists(libdir)) {
dir.create(libdir, showWarnings = FALSE)
wwwdata <- paste0(libdir, '/wwwdata.txt')
if (!file.exists(wwwdata))
download.file('https://github.com/sigbertklinke/wwwdata/raw/master/wwwdata/wwwdata.txt',
wwwdata, quiet=TRUE)
sources <- readLines(wwwdata)
for (source in sources) {
zzz <- paste0(libdir, '/', basename(source), '_zzz.R')
if (!file.exists(zzz)) download.file(paste(source, 'zzz.R', sep='/'), zzz, quiet=TRUE)
}
options(wwwwdata=list())
zzz <- list.files(path=libdir, pattern="_zzz\\.R$", full.names=TRUE)
for (z in zzz) source(z)
}
#
if (!overwrite && exists(name, envir = envir, inherits = FALSE)) {
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(name)))
} else {
fn <- path.expand(paste0("~/.mmstat/", basename(wwwdatalist[[name]])))
if (!file.exists(fn)) {
if (verbose) cat(sprintf("Loading data from %s\n", wwwdatalist[[name]]))
download.file(wwwdatalist[[name]], fn, quiet=TRUE)
}
if (verbose) cat(sprintf("Assigning data from %s\n", fn))
assign(name, readRDS(fn) , envir=envir)
}
}
}
invisible(names)
}
data(Titanic)
wwwdatalist
wwwdatalist[[name]]
name
getOption('wwwdata')
x<-getOption('wwwdata')
options(test=list(a=1, b="b"))
getOption("test")
getOption("wwwdata")
t<-list(a=1, b="b")
test(t=t)
options(t=t)
getOption("t")
x<-getOption('test2')
setwd("~/syncthing/projekte/R/mmstat.data/R")
check()
check()
x
x[['a']] = 1
x[['b']] =
'b'
x
x['c'] = '3'
x
x['c'] = pi
x
help('[[')
x <- list()
x[['a']] = 1
x[['b']] = 'b'
x
setwd("~/syncthing/projekte/R/mmstat.data/R")
check()
check()
rm (data)
check()
rm(list=ls())
check()
check()
library("devtools")
check()
check()
check()
check()
install(build_vignettes = TRUE)
install(build_vignettes = TRUE)
library("mmstat.data")
data(dasl.titanic)
install()
library("devtools")
setwd("~/syncthing/projekte/R/mmstat.data/R")
install()
install(build_vignettes = TRUE)
library("mmstat.data")
data(dasl.titanic)
data(dasl.titanic)
library("mmstat.data")
